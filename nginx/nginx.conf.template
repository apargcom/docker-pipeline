user  nginx;
events {
    worker_connections   1000;
}
http {

    ssl on;
    server_tokens off;
    ssl_buffer_size 8k;
    ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
    ssl_certificate /etc/letsencrypt/live/${SERVER_HOST}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${SERVER_HOST}/privkey.pem;

    upstream app-upstream {
        least_conn;
        server app:${APP_PORT} weight=1;
        keepalive 8;
    }

    # Redirect www to HTTPS non-www
    server {
        listen 80;
        listen 443 ssl http2;
        server_name www.${SERVER_HOST};
        return 301 https://${SERVER_HOST}$request_uri;
    }

    # Redirect HTTP non-www to HTTPS non-www
    server {
        listen 80;
        server_name ${SERVER_HOST};
        return 301 https://${SERVER_HOST}$request_uri;
    }

    # Main domain
    server {
        server_name  ${SERVER_HOST};        
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;

        location / {
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_pass http://app-upstream;
            proxy_redirect off;
        }

        location /.well-known/ {
            root /var/lib/certbot;
        }
    }

    #Enable browser cache
    expires 30d;
    add_header Pragma "public";
    add_header Cache-Control "public";

    #Enable output compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_disable "MSIE [1-6]\.";
}